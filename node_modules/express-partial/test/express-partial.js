var expect = require('chai').expect;
var FixedServer = require('fixed-server');
var request = require('request');
var httpUtils = require('request-mocha')(request);

var fixedServer = FixedServer.fromFile('./test/fixtures/fixed-server', {
  port: 1337
});

describe('An express server with express-partial', function () {
  describe('serving a page with a rendered partial', function () {
    fixedServer.run(['GET 200 /render']);
    httpUtils.save('http://localhost:1337/render');

    it('should respond with an object containing the partial name and its rendered html', function () {
      expect(this.err).to.eql(null);
      expect(this.res.statusCode).to.eql(200);
      expect(JSON.parse(this.body)).to.have.property('hello-world', '<h1>Hello World</h1>');
    });
  });

  describe('serving a page with multiple rendered partials', function () {
    fixedServer.run(['GET 200 /render-multiple']);
    httpUtils.save('http://localhost:1337/render-multiple');

    it('should respond with an object container both partials and their associated rendered html', function () {
      expect(this.err).to.eql(null);
      expect(this.res.statusCode).to.eql(200);
      var obj = JSON.parse(this.body);
      expect(obj).to.have.property('hello-world', '<h1>Hello World</h1>');
      expect(obj).to.have.property('name', '<h1>Joe Strummer</h1>');
    });
  });

  describe('serving a page that renders using the partial render callback', function () {
    fixedServer.run(['GET 200 /callback']);
    httpUtils.save('http://localhost:1337/callback');

    it('should pass the rendered string to the callback', function () {
      expect(this.err).to.eql(null);
      expect(this.res.statusCode).to.eql(200);
      expect(JSON.parse(this.body)).to.have.property('hello', '<h1>Hello World</h1>');
    });
  });
});
